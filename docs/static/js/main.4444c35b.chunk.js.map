{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["animations","App","useState","setModalOpen","setAnimationTypes","className","style","width","height","display","justifyContent","alignItems","flexDirection","map","animation","index","margin","fontSize","fontWeight","onClick","showAnimation","fadeAnimation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAKMA,EAAa,CAChB,CAAC,kBAAmB,kBAAmB,QACvC,CAAC,mBAAoB,mBAAoB,SACzC,CAAC,gBAAiB,gBAAiB,MACnC,CAAC,kBAAmB,kBAAmB,QACvC,CAAC,gBAAiB,gBAAiB,WACnC,CAAC,qBAAsB,qBAAsB,SA6EjCC,MA1Ef,WAAgB,IAAD,EACsBC,oBAAS,GAD/B,mBACMC,GADN,aAEgCD,mBAAS,CAClD,kBACA,oBAJS,mBAEWE,GAFX,WAeZ,OACG,sBAAKC,UAAU,MAAf,UACG,2EAyBA,qBACGC,MAAO,CACJC,MAAO,OACPC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,cAAe,UAPrB,SAUIZ,EAAWa,KAAI,SAACC,EAAWC,GAAZ,OACb,wBACGT,MAAO,CACJC,MAAO,QACPC,OAAQ,OACRQ,OAAQ,OACRC,SAAU,OACVC,WAAY,KAGfC,QAAS,kBAtDrBC,EAuD0CN,EAAU,GAtDpDO,EAsDwDP,EAAU,GApDlEV,EAAkB,CAACgB,EAAeC,SAClClB,GAAa,GALmB,IAChCiB,EACAC,GA4CS,SAaIP,EAAU,IALNC,YC7DRO,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACN,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHC,SAASC,eAAe,SAM3Bb,K","file":"static/js/main.4444c35b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport CrazyModal from \"react-crazy-modal\";\nimport ModalContent from \"./components/ModalContent\";\n\nconst animations = [\n   [\"showByDownSlide\", \"fadeByDownSlide\", \"Down\"],\n   [\"showByRightSlide\", \"fadeByRightSlide\", \"Right\"],\n   [\"showByUpSlide\", \"fadeByUpSlide\", \"Up\"],\n   [\"showByLeftSlide\", \"fadeByLeftSlide\", \"Left\"],\n   [\"showByOpacity\", \"fadeByOpacity\", \"Opacity\"],\n   [\"showByApproachSpin\", \"fadeByApproachSpin\", \"Spin\"],\n];\n\nfunction App() {\n   const [modalOpen, setModalOpen] = useState(false);\n   const [animationTypes, setAnimationTypes] = useState([\n      \"showByDownSlide\",\n      \"fadeByDownSlide\",\n   ]);\n\n   const handleOpenModalButtonClick = (\n      showAnimation: string,\n      fadeAnimation: string\n   ) => {\n      setAnimationTypes([showAnimation, fadeAnimation]);\n      setModalOpen(true);\n   };\n\n   return (\n      <div className=\"App\">\n         <div>This is the app. Do everything you want!</div>\n\n         {/* <CrazyModal\n            open={modalOpen}\n            onBackGroundClick={() => setModalOpen(false)}\n            backgroundColor=\"#000\"\n            backgroundOpacity={0.5}\n            animations={{\n               background: {\n                  appear: \"showByOpacity\",\n                  disappear: \"fadeByOpacity\",\n                  timingFunction: \"ease\",\n                  time: 400,\n               },\n               modal: {\n                  appear: animationTypes[0],\n                  disappear: animationTypes[1],\n                  timingFunction: \"ease\",\n                  time: 400,\n               },\n            }}\n         >\n            <ModalContent onCloseClick={() => setModalOpen(false)} />\n         </CrazyModal> */}\n\n         <div\n            style={{\n               width: \"100%\",\n               height: \"100vh\",\n               display: \"flex\",\n               justifyContent: \"center\",\n               alignItems: \"center\",\n               flexDirection: \"column\",\n            }}\n         >\n            {animations.map((animation, index) => (\n               <button\n                  style={{\n                     width: \"150px\",\n                     height: \"60px\",\n                     margin: \"20px\",\n                     fontSize: \"30px\",\n                     fontWeight: 600,\n                  }}\n                  key={index}\n                  onClick={() =>\n                     handleOpenModalButtonClick(animation[0], animation[1])\n                  }\n               >\n                  {animation[2]}\n               </button>\n            ))}\n         </div>\n      </div>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n   <React.StrictMode>\n      <App />\n   </React.StrictMode>,\n   document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}